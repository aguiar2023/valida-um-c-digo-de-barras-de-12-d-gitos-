// Classe Product com validação de código de barras
class Product {
    constructor(name, price, barcode) {
        this.name = name;
        this.price = price;
        this.barcode = barcode;
    }

    // Método para validar o código de barras usando regex
    validateBarcode() {
        const barcodeRegex = /^\d{12}$/; // Regex que valida 12 dígitos numéricos
        return barcodeRegex.test(this.barcode); // Verifique se o barcode corresponde ao regex
    }

    // Método para aplicar o desconto de 10% se o código de barras for válido
    applyDiscount() {
        if (this.validateBarcode()) {
            this.price *= 0.9; // Aplicar desconto de 10% ao preço
        }
    }

    // Método assíncrono que simula a verificação de estoque
    async isProductInStock() {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                if (this.name === "Phone") {
                    resolve(true); // Produto está em estoque
                } else {
                    resolve(false); // Produto não está em estoque
                }
            }, 2000); // Simulação de tempo de resposta de 2 segundos
        });
    }

    // Método para validar o código de barras, aplicar desconto e verificar estoque
    async checkProductStatus() {
        if (!this.validateBarcode()) {
            return "Código de barras inválido!"; // Retornar mensagem de código de barras inválido
        }

        this.applyDiscount(); // Aplicar desconto se o código de barras for válido

        const inStock = await this.isProductInStock();
        return inStock ? "Produto em estoque." : "Produto fora de estoque.";
    }
}

// Exemplo de uso da classe Product
async function exampleProduct() {
    const product = new Product("Phone", 3000, "123456789012"); // Nome, preço e código de barras

    const status = await product.checkProductStatus();
    console.log(status);
    console.log(`Preço após desconto (se aplicável): R$${product.price}`);
}

